---
title: "Distributed Lag Linear and Non-Linear Models in R: The Package dlnm"
format: html
bibliography: ../references.bib
---

::: callout-tip
Distributed lag/non-linear models (DLNMs) is a modelling framework to describe simultaneously a *non-linear* and a *delayed effects* between predictors and an outcome, a dependency defined as *exposure-lag-response (outcome)* association in time series data. This methodology rests on the definition of a *crossbasis*, a *bi-dimensional functional space* expressed by the combination of two sets of basis functions, which specify the relationships in the dimensions of predictor and lags, respectively [@gasparrini2011].
:::

# What is DLNM?

```{r}
#| eval: false
# Read the instruction of the package
vignette("dlnmOverview")
vignette("dlnmExtended")
vignette("dlnmTS")
```

In case of protracted exposures, the data can be structured by the partition in equally-spaced time periods, defining a series of exposure events and outcomes realizations. This methodology allows the effect of a single exposure event to be distributed over a specific period of time, using several parameters to explain the contributions at different lags, thus providing a comprehensive picture of the time-course of the exposure-response relationship.

**“Non-linear” Relationship**: The link between exposure and outcome might not be a straight line. Maybe very high temperatures drastically increase health risks, while mild temperatures don’t have much effect. DLNMs use flexible curves (like splines) to model these more complex, curvy relationships.

**Lagged Effects**: Instead of assuming an exposure affects health only on the same day, DLNMs captures delayed effects—like a heat wave that might cause more hospital admissions not just today, but also in the following days or weeks.

Traditionally, an epidemiological approach is to study the **exposure-response relationship**. The DLNM framework extend it by adding the **lag-response relationship** to construct the so-called dependency **exposure-lag-response** relationship, characterized by the bi-dimensional space of predictor and lag.

Specifically, two set of **basis functions** are chosen independently for modelling the **exposure** and **lag**-response relationships. These are then combined through a special tensor product defined by **bi-dimensional cross-basis functions**. The choice of the two sets of functions determines the shape of the relationship in each dimension. DLMs can be considered special cases of the more general DLNMs, when the **exposure-response is assumed linear**.

In the standard definition of the DLM/DLNM modelling framework, models are fitted with common regression methods, such as generalized linear models (GLMs) or Cox proportional hazard models. The functions in the dlnm package can be used more generally to facilitate the computation and interpretation of associations estimated from regression models, beyod the specific case of distributed lag modelling. Specifically, the functions can be applied to obtain predictions and plots of point estimates and measures of uncertainty for linear or non-linear unlagged relationships, estimated from either unpenalized (e.g., GLMs and Cox models) or penalized (GAMs) models.

The first step for performing DLMs or DLNMs consists of the choice of two sets of basis functions for modelling the exposure-lag-response association. Any kind of function determining completely known parametric transformations of the predictor can be used, and several options are available in the dlnm package. All the functions are meant to be called internally by onebasis() and crossbasis() and not directly run by the users.

Since version 2.0.0 of dlnm, `onebasis()` simply acts as a wrapper to other functions. The function has a `first argument x` for the predictor variable (i.e. ambient temperature), and another argument fun for specifying the basis function to be called internally, whose arguments are passed through the ellipsis argument '...'.

The function `crossbasis()` is the main function in the package dlnm. It calls `onebasis()` internally to generate the basis matrices for exposure-response and lag-response relationships, and `combines them through a special tensor product` in order to create the cross-basis, which specifies the exposure-lag-response dependency simultaneously in the two dimensions. The class of the first argument x of crossbasis() defines how the data are interpreted. **If a vector, x is assumed to represent an equally-spaced, complete and ordered series of observations in a time series framework**. If a matrix, x is assumed to represent a series of exposure histories for each observation (rows) and lag (columns). The lag period can be defined through the `second argument lag`. The two arguments `argvar` and `arglag` contain lists of arguments, each of them to be passed to `onebasis()` to build the matrices for the exposure-response and lag-response relationships respectively. The additional argument group, used only for time series data, defines groups of observations to be considered as individual unrelated series, and may be useful for example in seasonal analyses.

The function `crosspred()`: The interpretation of estimated parameters is usually complex for non-trivial basis transformations in DLMs, and `virtually impossible` in bi-dimensional DLNMs. The function `crosspred()` facilitates the interpretation by predicting the association for `a grid of predictor` and `lag values`, chosen by default or directly by the user. The function creates the same basis or cross-basis functions for the chosen predictor and lag values, extracts the related parameters estimated in the regression model, and generates predictions with associated standard errors and confidence intervals.

# Practical example

::: callout-important
We will use the `chicagoNMMAPS` as an example of analysis. The example refers to the effects on all-cause mortality of two environmental factors, air pollution (ozone) and temperature, in the city of Chicago during the period 1987-2000.
:::

```{r}
pacman::p_load(
  rio,
  here,
  DT,
  dlnm,
  splines,
  survival,
  sjPlot,
  tidyverse
)
```

```{r}
data(chicagoNMMAPS)
datatable(chicagoNMMAPS)
```

A model for time series data may be generally represented by:

$$
g(\mu_i) = \alpha + \sum_{j=1}^J s_j\bigl(x_{ij}, \beta_j\bigr) 
           + \sum_{k=1}^K \gamma_k\,u_{ik}
$$

In the illustrative example on Chicago data, the outcome Y~t~ is **daily death counts**, assumed to originate from a so-called **overdispersed Poisson distribution** with E(Y) = μ, V(Y) = $\phi$ μ, and a canonical log-link. The non-linear and delayed effects of ozone and temperature are modeled through as particular functions s~j~ which define the relationship along the two dimensions of predictor and lags. Generally, non-linear exposure-response dependencies are expressed in regression models through appropriate functions *s*. The main choices typically rely on functions describing smooth curves, like polynomials or spline functions. All of these functions apply a transformation of the original predictor to generate **a set of transformed variables included in the model as linear terms**. 

::: {.callout-caution}
The DLNMs framework introduced in this paper is developed for time series data. The general expression of the basic model in allows this methodology to be applied to any family distribution and link function within (generalized) linear models (GLM), with extensions to generalized additive models (GAM) or models based on generalized estimating equations (GEE). However, the current implementation of DLNMs requires single series of equally-spaced, complete and ordered data.
:::

## Specifying a DLNM


```{r}
basis.o3 <- crossbasis(
  chicagoNMMAPS$o3,
  lag = 10,
  argvar = list(fun = "thr", thr.value = 40.3, side = "h"),
  arglag = list(fun = "strata", breaks = c(2, 6))
)

klag <- exp(((1 + log(30)) / 4 * 1:3) - 1)
basis.temp <- crossbasis(
  chicagoNMMAPS$temp,
  lag = 30,
  argvar = list(fun = "bs", degree = 3, df = 6),
  arglag = list(knots = klag)
)

summary(basis.o3)
summary(basis.temp)
```

- The first argument x of crossbasis() is the predictor series, in this case chicagoNMMAPS$o3 and chicagoNMMAPS$temp.  The values in x are expected to represent an equally-spaced and ordered series, with the interval defining the lag unit
- The cross-basis for ozone comprises a threshold function for the space of the predictor, with a linear relationship beyond 40.3 μgr/m3, and a dummy parameterization assuming constant distributed lag effects along the strata of lags 0-1, 2-5 and 6-10 ().
- In contrast, the options for temperature are a cubic spline with 6 df (knots at equally-spaced percentiles by default) centered at 25°C, and a natural cubic spline (lagtype = “ns” by default) with 5 df (knots at equally-spaced values in the log scale of lags by default), up to a maximum of 30 lags.


The cross-basis matrices can be included in the model formula of a common regression function in order to estimate the corresponding parameters η in (5). In the example, the final model includes also a natural cubic spline with 7 df/year to model the seasonal and long time trend components and a factor for day of the week, specified by the function ns() in the package splines, which needs to be loaded in the session. The code is:

```{r}

model <- glm(
  death ~ basis.temp + basis.o3 + ns(time, 7 * 14) + dow,
  family = quasipoisson(),
  chicagoNMMAPS
)
```

```{r}
#| echo: false
# result <- sjPlot::tab_model(model)
# export(result, "3-dlnm/model_result.RDS")
result <- import(here("3-dlnm/model_result.RDS"), trust = TRUE)
result
```

The bi-dimensional exposure-response relationship estimated by a DLNM may be difficult to summarize. The meaning of such parameters, which define the relationship along two dimensions, is not straightforward. Interpretation can be aided by the prediction of lag-specific effects on a grid of suitable exposure values and the L + 1 lags. In addition, the overall effects, predicted from exposure sustained over lags L to 0, can be computed by summing the lag-specific contributions.

## Predicting from a DLNM

Predicted effects are computed in dlnm by the function `crosspred()`. The following code computes the prediction for ozone and temperature in the example:

```{r}
pred.o3 <- crosspred(
  basis.o3,
  model,
  at = c(0:65, 40.3, 50.3)
) # chose the integers from 0 to 65 μgr/m3 in ozone, plus the value of the chosen threshold and 10 units above (40.3 and 50.3 μgr/m3, respectively)
pred.temp <- crosspred(
  basis.temp,
  model,
  by = 2, # rounded values within the temperature range with an increment of 2°C.
  cen = 25
)
```

The results stored in the `crosspred` object can be directly accessed to obtain specific figures or customized graphs other than those produced by dlnm plotting functions. For example, the overall effect for the 10-unit increase in ozone, expressed as RR and 95% confidence intervals, can be derived by:


```{r}
pred.o3$allRRfit["50.3"] # RR = 1.05387
cbind(pred.o3$allRRlow, pred.o3$allRRhigh)["50.3", ] # combine low and high value
```


```{r}
source(here("3-dlnm/dlnm_example.R"))
```
